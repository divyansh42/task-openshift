name: Test Operator on CRC
on:
  workflow_dispatch: {}
  push:
    branches: [ try-gh ]
  pull_request: {}
jobs:
  build:
    name: Run E2E Tests on CRC
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go:
          - '1.20'
    env:
      SHELL: /bin/bash
      KUBECONFIG: '/Users/runner/.kube/config'
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      - name: Download and install CRC
        run: |
          wget "https://developers.redhat.com/content-gateway/file/pub/openshift-v4/clients/crc/2.33.0/crc-linux-amd64.tar.xz"
          tar -xf crc-linux-amd64.tar.xz --directory /usr/local/bin --strip-components=1 crc-linux-2.33.0-amd64/crc
      - name: Testing CRC
        run: |
          which crc
          crc --help
      - name: Install required virtualization software
        run: |
          sudo apt-get update
          sudo apt install qemu-kvm libvirt-daemon libvirt-daemon-system
          sudo usermod -a -G libvirt $USER
      - name: Remove unwanted stuff to free up disk image
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf /opt/hostedtoolcache/CodeQL

          sudo docker image prune --all --force

          sudo swapoff -a
          sudo rm -f /mnt/swapfile

      - name: Set the crc config
        run: |
          crc config set preset okd
          crc config set network-mode user
      - name: Setup the crc
        run: sudo -su $USER crc setup
      - name: Start the crc
        run: sudo -su $USER crc start
      - name: Set Creds
        run: |
          sudo -su $USER crc oc-env
          echo "KUBECONFIG=$HOME/.crc/machines/crc/kubeconfig" >> $GITHUB_ENV
      - name: Create GitOps Subscription
        run: |
          oc apply -f - <<EOF
          apiVersion: operators.coreos.com/v1alpha1
          kind: Subscription
          metadata:
            name: openshift-gitops-operator
            namespace: openshift-operators
          spec:
            channel: latest
            installPlanApproval: Automatic
            name: openshift-gitops-operator
            source: redhat-operators
            sourceNamespace: openshift-marketplace
          EOF
          sleep 300
          oc get pods -n openshift-gitops
          oc rollout status deployment openshift-gitops-argocd-server -n openshift-gitops